# YAML (Yet Another Markup Language, YML Ain't Markup Language)
# YAML은 XML, C, 파이썬, 펄, RFC2822에서 정의된 e-mail 양식에서 개념을 얻어 만들어진 '사람이 쉽게 읽을 수 있는' 데이터 직렬화 양식
# XML과 JSON이 데이터 직렬화에 주로 쓰이기 시작하면서, 많은 사람들이 YAML을 '가벼운 마크업 언어'로 사용
# application.yml 파일 하나로 여러개의 yml을 생성 한것과 같이 처리 가능 (with "--- " 구분자)

# >> --- 예시 >>
#--- #local 환경
#spring:
#  profiles:
#    default:
#--- #dev 환경 (각 환경 중간에 공백은 없어야 함)
#spring:
#  profiles:
#    default:

# @PropertySource 어노테이션으로 프로퍼티 값을 불러 올 수 없다. 해당 어노테이션을 사용 하려면 *프로퍼티 파일을 사용해야된다.
# 프로퍼티 적용 순서: application-dev-common.yaml > application-{profiles}.yaml > application.yaml


server:
  port: 8766 #기본포트 8080인데 원하는 포트로 변경

spring:   #PropertySource의 적용 순서  #*프로퍼티 파일을 사용 후 main클래스 위에 어노테이션을 지정 (? 맞나)
  application:  #profiles:
    name: discoveryservice    #default:

# 클라우드시대! 서버 IP는 유동적으로 변경 동적으로 이동하는 서버(eureka client)를 관리하는 서버(eureka server)를 구성
# 실제 클라이언트의 요청을 처리하는 서버(eureka client)들 사이에서 Middle-tier(중간다리) 역할을 하는것이 eureka server
# eureka client 관리뿐 아니라 로드 밸런싱이나 장애 복구 기능까지 제공
# 유레카 라이브러리만을 지원
eureka:
  client:
    register-with-eureka: false   # 유레카 서버에 본인 서비스를 등록할 건지 여부, 기본값 true 라서 지정하지 않아도 상관 없다.
    fetch-registry: false   # 유레카 서버로부터 서비스 목록을 로컬 캐시에 저장할 건지 여부, 기본값 true 라서 지정하지 않아도 상관 없다.
    
   #마지막으로 main클래스 위에 @EnableEurekaServer 어노테이션을 지정하고 실행하면 유레카 서버의 역할을 수행한다.
   
#    service-url:   #만약 true 일때 등록할 주소값 지정
#      http://localhost:8761/eureka/
#   main 클래스 위에 @EnableDiscoveryClient 어노테이션 설정
#   유레카와 달리 모든 라이브러리를 지원


# 실행
# pom.xml이 있는 위치에서 mvn package로 서버 실행가능한 jar파일을 생성하고 2개의 터미널을 열어 각기 다른 포트로 서버를 실행
#  $ java -jar -DPORT=8081 target/eurekaclient-0.0.1-SNAPSHOT.jar
#  $ java -jar -DPORT=8082 target/eurekaclient-0.0.1-SNAPSHOT.jar
